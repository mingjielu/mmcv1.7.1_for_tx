// !!! This is a file automatically generated by hipify!!!
#include "hip/hip_runtime.h"
// Modified from
// https://github.com/sshaoshuai/Pointnet2.PyTorch/tree/master/pointnet2/src/sampling_gpu.cu

#include <stdio.h>
#include <stdlib.h>

#include "../hip/furthest_point_sample_hip_kernel.cuh"
#include "pytorch_hip_helper.hpp"

inline int opt_n_threads(int work_size) {
  const int pow_2 = ::log(static_cast<double>(work_size)) / ::log(2.0);

  return max(min(1 << pow_2, 1024), 1);
}

void FurthestPointSamplingForwardCUDAKernelLauncher(int b, int n, int m,
                                                    const float* dataset,
                                                    float* temp, int* idxs) {
  // dataset: (B, N, 3)
  // tmp: (B, N)
  // output:
  //      idx: (B, M)

  hipStream_t stream = at::hip::getCurrentHIPStreamMasqueradingAsCUDA();

  unsigned int n_threads = opt_n_threads(n);

  switch (n_threads) {
    case 1024:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<1024>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 512:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<512>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 256:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<256>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 128:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<128>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 64:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<64>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 32:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<32>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 16:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<16>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 8:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<8>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 4:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<4>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 2:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<2>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 1:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<1>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    default:
     hipLaunchKernelGGL(( furthest_point_sampling_forward_cuda_kernel<512>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
  }

  AT_CUDA_CHECK(hipGetLastError());
}

void FurthestPointSamplingWithDistForwardCUDAKernelLauncher(
    int b, int n, int m, const float* dataset, float* temp, int* idxs) {
  // dataset: (B, N, N)
  // temp: (B, N)
  // output:
  //      idx: (B, M)

  hipStream_t stream = at::hip::getCurrentHIPStreamMasqueradingAsCUDA();

  unsigned int n_threads = opt_n_threads(n);

  switch (n_threads) {
    case 1024:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<1024>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 512:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<512>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 256:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<256>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 128:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<128>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 64:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<64>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 32:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<32>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 16:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<16>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 8:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<8>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 4:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<4>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 2:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<2>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    case 1:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<1>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
      break;
    default:
     hipLaunchKernelGGL(( furthest_point_sampling_with_dist_forward_cuda_kernel<512>)
          , dim3(b), dim3(n_threads), 0, stream, b, n, m, dataset, temp, idxs);
  }

  AT_CUDA_CHECK(hipGetLastError());
}
